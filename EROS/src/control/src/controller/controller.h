/******************************************************************************
 * Copyright 2023 The EDrive Authors. All Rights Reserved.
 *****************************************************************************/

#pragma once

#include <cmath>
#include <string>
#include "app/state.h"

// ros message
#include <control/ControlCommand.h>

namespace control_msg = control;

/**
 * @namespace EDrive::control
 * @brief EDrive::control
 */
namespace EDrive {
namespace control {

using EDrive::Result_state;

/**
 * @class Controller
 *
 * @brief base class for all controllers.
 */
class Controller {
 public:
  /**
   * @brief constructor
   */
  Controller() = default;

  /**
   * @brief destructor
   */
  virtual ~Controller() = default;

  /**
   * @brief initialize Controller
   * @param control_conf control configurations
   * @return Status initialization status
   */
  virtual Result_state Init() = 0;

  /**
   * @brief compute control command based on current vehicle status
   *        and target trajectory
   * @param localization vehicle location
   * @param chassis vehicle status e.g., speed, acceleration
   * @param trajectory trajectory generated by planning
   * @param cmd control command
   * @return Status computation status
   */
  virtual Result_state ComputeControlCommand(control_msg::ControlCommand controlcommand_) = 0;

  /**
   * @brief reset Controller
   * @return Status reset status
   */
  virtual Result_state Reset() = 0;

  /**
   * @brief controller name
   * @return string controller name in string
   */
  virtual std::string Name() const = 0;

  /**
   * @brief stop controller
   */
  virtual void Stop() = 0;
};

} // namespace control
} // namespace EDrive